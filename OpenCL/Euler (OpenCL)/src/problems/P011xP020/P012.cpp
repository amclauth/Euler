#include "../../base/problem.h"

class P012: public Problem
{
	/**
	 * P012<br>
	 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
	 * The first ten terms would be:
	 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
	 * Let us list the factors of the first seven triangle numbers:
	 *  1: 1
	 *  3: 1,3
	 *  6: 1,2,3,6
	 *  10: 1,2,5,10
	 *  15: 1,3,5,15
	 *  21: 1,3,7,21
	 *  28: 1,2,4,7,14,28
	 *  We can see that 28 is the first triangle number to have over five divisors.
	 *  What is the value of the first triangle number to have over five hundred divisors?
	 *  Ans: 76576500
	 */
	public:
		P012()
		{
			problem_number = 12;
			variations = 2;
		}
		~P012() {}

		bool setup(int variation)
		{
			bool retval = false;
			cl = new CLKernel(kernelsize);
			switch (variation)
			{
				case 0:
					retval = brute_setup();
					break;
				case 1:
				case -1:
					retval = opt_setup();
					break;
				default:
					retval = false;
			}
			return retval;
		}

		bool teardown(int variation)
		{
			bool retval = false;
			switch (variation)
			{
				case 0:
					retval = brute_teardown();
					break;
				case 1:
				case -1:
					retval =opt_teardown();
					break;
				default:
					retval = false;
			}
			cl->releaseKernel();
			return retval;
		}

		void execute(int variation)
		{
			switch (variation)
			{
				case 0:
					brute();
					break;
				case 1:
				case -1:
					optimized();
					break;
				default:
					std::cout << "NOOP!" << std::endl;
					break;
			}
		}

	private:

		int size;

		/**
		 * Brute force version
		 * Check every position and their associated diagonals / verticals / horizontals
		 */
		bool brute_setup()
		{
			// 1 to 998 for each (because if a is 998, b and c both have to be 1
			size = 20000;
			int initialVal = 2000000000;

			cl->init("src/problems/P011xP020/P012.cl","brute");
         cl->createReadWriteMemory(sizeof(int),&answer_mem);
			cl->transferCPUObjectToGPU(sizeof(int),&answer_mem,&initialVal);
			cl->setupOpenCLKernelArgs(1,
					sizeof(cl_mem), &answer_mem);
			cl->waitForQueue(); // sync
			setThreads(size);
			return true;
		}

		bool brute_teardown()
		{
			int ans;
			if (!cl->transferGPUObjectToCPU(sizeof(int), &answer_mem, &ans))
			{
				std::cout << "ERROR:: Could not read answer from GPU!" << std::endl;
				return false;
			}
			answer = to_string(ans);
			clReleaseMemObject(answer_mem);
			return true;
		}

		int brute()
		{
			cl->launchKernel(threadsize);
			cl->waitForQueue();
			return 0;
		}

		/**
		 *
		 */
		bool opt_setup()
		{
			// 1 to 998 for each (because if a is 998, b and c both have to be 1
			size = 20000;
			int initialVal = 2000000000;

			cl->init("src/problems/P011xP020/P012.cl","optimized");
			cl->createReadWriteMemory(sizeof(int),&answer_mem);
			cl->transferCPUObjectToGPU(sizeof(int),&answer_mem,&initialVal);
			cl->setupOpenCLKernelArgs(1,
					sizeof(cl_mem), &answer_mem);
			cl->waitForQueue(); // sync
			setThreads(size);
			return true;
		}

		bool opt_teardown()
		{
			int ans;
			if (!cl->transferGPUObjectToCPU(sizeof(int), &answer_mem, &ans))
			{
				std::cout << "ERROR:: Could not read answer from GPU!" << std::endl;
				return false;
			}
			answer = to_string(ans);
			clReleaseMemObject(answer_mem);
			return true;
		}

		int optimized()
		{
			cl->launchKernel(threadsize);
			cl->waitForQueue();
			return 0;
		}
};
