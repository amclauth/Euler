package problems.P001xP050;

import util.Basic;
import base.Problem;

/**
 * P012<br>
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
 * ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ... Let us list the
 * factors of the first seven triangle numbers: 1: 1 3: 1,3 6: 1,2,3,6 10:
 * 1,2,5,10 15: 1,3,5,15 21: 1,3,7,21 28: 1,2,4,7,14,28 We can see that 28 is
 * the first triangle number to have over five divisors. What is the value of
 * the first triangle number to have over five hundred divisors? Ans: 76576500
 * 
 * @return
 */
public class P012 extends Problem {
	public P012() {
		problemNumber = 12;
		variations = 3;
	}

	@Override
	protected String execute(int variation) {
		switch (variation) {
		case 0:
			return bruteForce() + "";
		case 1:
		case -1:
			return faster() + "";
		case 2:
			return combine() + "";
		}
		return null;
	}

	/**
	 * Simply keep adding to get the triangle numbers and then check the
	 * divisors on each
	 * 
	 * @return
	 */
	private long bruteForce() {
		int ii = 1;
		int sum = 0;
		int count = 0;
		while (count < 500) {
			sum += ii;
			count = Basic.getDivisors(sum).size();
			ii++;
		}
		return sum;
	}

	/**
	 * we know that the triangle numbers are n(n+1)/2. We also know that n and
	 * n+1 have no factors in common, so similarly, n and (n+1)/2 would have no
	 * factors in common (except "1"), so we can multiply the factors of each
	 * together.
	 * 
	 * @return
	 */
	private long faster() {
		int ii = 1;
		int count = 0;
		while (count <= 500) {
			ii++;
			if (ii % 2 == 0) {
				// even ... do the division on the ii number
				count = Basic.getDivisors(ii / 2).size()
						* Basic.getDivisors(ii + 1).size();
			} else {
				// odd ... do the division on the ii+1 number
				count = Basic.getDivisors(ii).size()
						* Basic.getDivisors((ii + 1) / 2).size();
			}
		}
		return Basic.getTriangleNumber(ii);
	}

	private long combine() {
		int[] primes = { 2, 3, 5, 7, 11, 13, 17, 19 };
		int[] powers = { 0, 0, 0, 0, 0, 0, 0, 0 };
		for (int size = 1; size < 10; size++)
		{
			for (long idx = 0; idx < Math.pow(size, primes.length); idx++) {
				powers[0]++;
				for (int ii = 0; ii < powers.length - 1; ii++) {
					if (powers[ii] > size) {
						powers[ii] = 0;
						powers[ii + 1]++;
					} else {
						break;
					}
				}
				
				int divisors = 1;
				for (int ii = 0; ii < powers.length; ii++)
				{
					divisors *= powers[ii] + 1;
				}
				if (divisors > 500) {
					long num = 1;
					for (int ii = 0; ii < powers.length; ii++) {
						for (int jj = 0; jj < powers[ii]; jj++) {
							num *= primes[ii];
						}
					}
					// to be a triangular number, it has to satisfy n =
					// (sqrt(8x+1)-1)/2, so 8x+1 has to
					// be a perfect square and be odd.
					long triang = num * 8 + 1;
					long test = (long) (Math.sqrt(triang) + .5);
					if (test * test == triang && test % 2 == 1) {
						// got one!
						return num;
					}
				}
			}

		}
		return 0;
	}

}
