package problems.P001xP050;

import util.Basic;
import base.Problem;

/**
 * P002<br>
 * Each new term in the Fibonacci sequence is generated by adding the previous
 * two terms. By starting with 1 and 2, the first 10 terms will be:<br>
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...<br>
 * By considering the terms in the Fibonacci sequence whose values do not exceed
 * four million, find the sum of the even-valued terms.<br>
 * Ans: 4613732
 */
public class P002 extends Problem
{
   public P002()
   {
      variations = 3;
   }

   @Override
   protected String execute(int variation)
   {
      switch (variation)
      {
         case 0:
            return bruteForce() + "";
         case 1:
            return closedFormItr() + "";
         case 2:
         case -1:
            return closedForm() + "";
      }
      return null;
   }

   /**
    * This is the brute force attempt. Just check all the numbers below 1000 to
    * see if they're divisible. Should be fast enough.
    * 
    * @return
    */
   private int bruteForce()
   {
      // just brute force, but it's really fast anyway
      int sum = 0;
      int prev = 1;
      int curr = 2;

      while (curr < 4000000)
      {
         if (curr % 2 == 0)
         {
            sum += curr;
         }
         curr += prev;
         prev = curr - prev;
      }
      return sum;
   }

   /**
    * Note that every 3rd number is even and try to use closed form
    */
   int closedFormItr()
   {
      int f = 0;
      int n = 0;
      int sum = 0;
      while (f < 4000000)
      {
         sum += f;
         n += 3;
         f = Basic.getNthFibonacci(n);
      }
      return sum;
   }

   /**
    * Use the closed form of fibonacci and the closed form of geometric
    * progression combined
    */
   int closedForm()
   {
      double phi = 0.5 + 0.5 * Math.sqrt(5);
      int N = (int) Math.floor(Math.log(4000000.0 * Math.sqrt(5) + 0.5)
            / Math.log(phi));
      N = N / 3;
      int sum = (Basic.getNthFibonacci(3 * N + 2) - 1) / 2;
      return sum;
   }

}
