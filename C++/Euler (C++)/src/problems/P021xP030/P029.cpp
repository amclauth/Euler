#include "../../base/problem.h"
#include "../../util/prime.h"

#include <vector>
#include <algorithm>
#include <cmath>
#include <set>

/**
 * P029<br>
 * Consider all integer combinations of ab for 2  a  5 and 2  b  5:
 * 2^2=4, 2^3=8, 2^4=16, 2^5=32
 * 3^2=9, 3^3=27, 3^4=81, 3^5=243
 * 4^2=16, 4^3=64, 4^4=256, 4^5=1024
 * 5^2=25, 5^3=125, 5^4=625, 5^5=3125
 * If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:
 * 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
 * How many distinct terms are in the sequence generated by ab for 2  a  100 and 2  b  100?
 * Ans: 9183
 */
class P029: public Problem
{
   public:
      P029()
      {
         problem_number = 29;
         variations = 2;
      }
      ~P029()
      {
      }

      std::string execute(int variation)
      {
         switch (variation)
         {
            case 0:
            case -1:
               return to_string(bruteForce());
            case 1:
               return to_string(faster());
            default:
               return std::string("unavailable");
         }
         return NULL;
      }

   private:

      /**
       * Build the array, then add them up!
       */
      long bruteForce()
      {
         std::vector<double> list;// = new std::vector<double>*;
         for (int a = 2; a <= 100; a++)
         {
            for (int b = 2; b <= 100; b++)
            {
               list.push_back(pow(a,b));
            }
         }
         std::sort(list.begin(), list.end());
         int count = 1;
         double last = list.at(0);
         for (unsigned int ii = 1; ii < list.size(); ii++)
         {
            double curr = list.at(ii);
            if (last != curr)
            {
               last = curr;
               count++;
            }
         }
         return count;
      }

      /**
       * Just use a set and count them!
       */
      long faster()
      {
         std::set<double> set;
         for (int a = 2; a <= 100; a++)
         {
            for (int b = 2; b <= 100; b++)
            {
               set.insert(pow(a,b));
            }
         }
         return set.size();
      }
};
