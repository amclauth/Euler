#include "../../base/problem.h"
#include "../../util/basic.h"

/**
 * P012<br>
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
 * The first ten terms would be:
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * Let us list the factors of the first seven triangle numbers:
 *  1: 1
 *  3: 1,3
 *  6: 1,2,3,6
 *  10: 1,2,5,10
 *  15: 1,3,5,15
 *  21: 1,3,7,21
 *  28: 1,2,4,7,14,28
 *  We can see that 28 is the first triangle number to have over five divisors.
 *  What is the value of the first triangle number to have over five hundred divisors?
 *  Ans: 76576500
 */
class P012: public Problem
{
   public:
      P012()
      {
         problem_number = 12;
         variations = 2;
      }
      ~P012()
      {
      }

      std::string execute(int variation)
      {
         switch (variation)
         {
            case 0:
               return to_string(bruteForce());
            case 1:
            case -1:
               return to_string(faster());
            default:
               return std::string("unavailable");
         }
         return NULL;
      }

   private:

      /**
       * Simply keep adding to get the triangle numbers and then check the divisors on each
       */
      long bruteForce()
      {
         int ii = 1;
         int sum = 0;
         int count = 0;
         while (count < 500)
         {
            sum += ii;
            count = basic::getDivisors(sum)->size();
            ii++;
         }
         return sum;
      }

      /**
       * we know that the triangle numbers are n(n+1)/2. We also know that n and n+1 have no factors
       * in common, so similarly, n and (n+1)/2 would have no factors in common (except "1"), so we
       * can multiply the factors of each together.
       */
      long faster()
      {
         int ii = 0;
         int count = 0;
         while (count <= 500)
         {
            ii++;
            if (ii % 2 == 0)
            {
               // even ... do the division on the ii number
               count = basic::getDivisors(ii / 2)->size() * basic::getDivisors(ii + 1)->size();
            }
            else
            {
               // odd ... do the division on the ii+1 number
               count = basic::getDivisors(ii)->size() * basic::getDivisors((ii + 1) / 2)->size();
            }
         }
         return basic::getTriangle(ii);
      }
};
